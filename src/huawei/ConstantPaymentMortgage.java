/**   
* @Title: ConstantPaymentMortgage.java
* @Package huawei
* @Description: TODO
* @author Huaigui   
* @date 2016年8月17日 下午1:21:05
* @version V1.0   
*/
package huawei;

import java.util.Scanner;

/**
 * @ClassName: ConstantPaymentMortgage
 * @see: 等额本息还贷 描述: 目前，银行的个人住房货款的还款方式主要有等额本息和等额本金两种。
 *       等额本息每月按相同金额还贷款本息，月还款中利息逐月递减，本金逐月递增； 等额本金每月还款金额递减，月还款中本金保持相同数额，利息逐月递减。
 *       二者的主要区别在于，前者每期还款金额相同，即每月本金加利息总额相同，客户还贷压力均衡，但利息负担相对较多；
 *       后者又叫“递减还款法”，每月本金相同，利息不同，前期还款压力大，但以后的还款金额逐渐递减，利息总负担较少。
 * 
 *       总体而言，目前最为普遍，也是大多数银行长期推荐的方式是等额本息。
 * 
 *       计算公式： 每月还款额=贷款本金*月利率+贷款本金*月利率/(1+月利率)^(还款总期数-1)
 * 
 *       公式推导： 设贷款总额为A，银行月利率为β，总期数为m（个月），月还款额设为X，则各个月所欠银行贷款为： 第一个月A(1+β)-X
 *       第二个月(A(1+β)-X)(1+β)-X = A(1+β)^2-X[1+(1+β)]
 *       第三个月((A(1+β)-X)(1+β)-X)(1+β)-X = A(1+β)^3-X[1+(1+β)+(1+β)^2] ...
 *       以此类推，可得第n个月后所欠银行贷款为 A(1+β)^n–X[1+(1+β)+(1+β)^2+…+(1+β)^(n-1)] =
 *       A(1+β)^n–X[(1+β)^n - 1]/β 由于还款总期数为m，也即第m月刚好还完银行所有贷款， 因此有
 *       A(1+β)^m–X[(1+β)^m-1]/β=0 由此求得 X=Aβ(1+β)^m/[(1+β)^m-1]
 * 
 *       假定借款人从银行获得一笔20万元的个人住房贷款，贷款期限20年，贷款月利率4.2‰，每月还本付息。
 *       按照上述公式计算，每月应偿还本息和为1324.33元。 上述结果只给出了每月应付的本息和，因此需要对这个本息和进行分解。
 *       一个月为一期，第一期贷款余额20万元，应支付利息840.00元（200000×4.2‰），
 *       所以只能归还本金484.33元，仍欠银行贷款199515.67元；
 *       第二期应支付利息837.97元（199515.67×4.2‰），归还本金486.36元，仍欠银行贷款199029.31元， 以此类推。
 * 
 *       注意由于金额偿还精确到分，并且数值计算有精度误差，所以最后一个月的还款数额，可能与前面每月还款额稍有出入。
 *       例如上面例子中，最后一期应支付利息5.55元，归还本金1320.87，偿还本息共1326.42元，剩余本金0元，即大功告成。
 * 
 *       如上所述等额本息还款方式，在月供“本金与利息”的分配比例中，前面所还的利息比例大、本金比例小，后面逐步转为本金比例大、
 *       利息比例小，我们的任务就是找出这值得纪念的时刻。 运行时间限制: 无限制 内存限制: 无限制 输入: 可以一行或多行，
 *       每行首先是贷款金额（单位万元），然后是贷款年限（单位年，一年十二个月，按月还款，每月为一期），最后是年贷款利率（单位%，
 *       精确到小数点后两位，取值为0.00~100.00）。 注意所谓多行输入，类似于将一个多行文件作为输入，例如内容如下： 20 10 9.99
 *       200 200 9.99 输出: 与输入行一一对应， 每行中首先输出原输入行中的贷款金额、贷款年限和年贷款利率，
 *       然后输出第几个还款期次（即第几个月）开始，偿还的本金大于偿还的利息， 如果不存在，输出0。
 *       注意多行输入对应多行输出，类似于将一个多行文件作为输入，然后输出一个多行文件，例如如上输入样例，输出内容如下： 20 10 9.99 38
 *       200 200 9.99 2400 样例输入: 20 20 5.04 样例输出: 20 20 5.04 76
 * @author Huaigui
 */
public class ConstantPaymentMortgage {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		java.text.DecimalFormat df = new java.text.DecimalFormat("#.##");
		double A = 0.0;
		double b = 0.0;
		double m = 0;
		double X = 0;
		while (sc.hasNext()) {
			A = sc.nextDouble() * 10000;
			m = sc.nextDouble() * 12;
			b = sc.nextDouble() / 100.0 / 12;
			X = (A * b * Math.pow((1 + b), m)) / (Math.pow((1 + b), m) - 1);
			double laon = A;
			int i = 1;
			for (; i < m; i++) {
				double interest = laon * b;
				laon = laon - X + interest;
				if (X - interest > interest)
					break;
			}
			System.out.println((int) (A / 10000) + " " + (int) (m / 12) + " " + df.format(b * 100 * 12) + " " + i);
		}
		sc.close();
	}
}
